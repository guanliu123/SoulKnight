// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SoulKnight.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SoulKnightProtocol {

  /// <summary>Holder for reflection information generated from SoulKnight.proto</summary>
  public static partial class SoulKnightReflection {

    #region Descriptor
    /// <summary>File descriptor for SoulKnight.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SoulKnightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTb3VsS25pZ2h0LnByb3RvEhJTb3VsS25pZ2h0UHJvdG9jb2wiLwoJTG9n",
            "aW5QYWNrEhAKCFVzZXJOYW1lGAEgASgJEhAKCFBhc3N3b3JkGAIgASgJIqUB",
            "CghSb29tUGFjaxIQCghSb29tTmFtZRgBIAEoCRISCgpDdXJyZW50TnVtGAIg",
            "ASgFEg4KBk1heE51bRgDIAEoBRIuCghSb29tQ29kZRgEIAEoDjIcLlNvdWxL",
            "bmlnaHRQcm90b2NvbC5Sb29tQ29kZRIzCgtQbGF5ZXJQYWNrcxgFIAMoCzIe",
            "LlNvdWxLbmlnaHRQcm90b2NvbC5QbGF5ZXJQYWNrIiAKClBsYXllclBhY2sS",
            "EgoKUGxheWVyTmFtZRgBIAEoCSJsCg1DaGFyYWN0ZXJQYWNrEhUKDUNoYXJh",
            "Y3Rlck5hbWUYASABKAkSEgoKUGxheWVyVHlwZRgCIAEoCRIwCglJbnB1dFBh",
            "Y2sYAyABKAsyHS5Tb3VsS25pZ2h0UHJvdG9jb2wuSW5wdXRQYWNrIo0CCglJ",
            "bnB1dFBhY2sSEgoKSG9yaXpvbnRhbBgBIAEoAhIQCghWZXJ0aWNhbBgCIAEo",
            "AhIRCglNb3VzZVBvc1gYAyABKAISEQoJTW91c2VQb3NZGAQgASgCEhUKDUNo",
            "YXJhY3RlclBvc1gYBSABKAISFQoNQ2hhcmFjdGVyUG9zWRgGIAEoAhIXCg9J",
            "c0F0dGFja0tleURvd24YByABKAgSEAoIQmF0dGxlSWQYCCABKAUSFgoOSXNT",
            "a2lsbEtleURvd24YCSABKAgSFwoPSXNTd2l0Y2hLZXlEb3duGAogASgIEhkK",
            "EUlzSW50ZXJhY3RLZXlEb3duGAsgASgIEg8KB0ZyYW1lSWQYDCABKAUiWAoS",
            "QWxsUGxheWVyT3BlcmF0aW9uEg8KB0ZyYW1laWQYASABKAUSMQoKT3BlcmF0",
            "aW9ucxgCIAMoCzIdLlNvdWxLbmlnaHRQcm90b2NvbC5JbnB1dFBhY2siYAoO",
            "QmF0dGxlSW5pdEluZm8SEAoIUmFuZFNlZWQYASABKAUSPAoOQmF0dGxlVXNl",
            "ckluZm8YAiADKAsyJC5Tb3VsS25pZ2h0UHJvdG9jb2wuQmF0dGxlUGxheWVy",
            "UGFjayLZAQoKQmF0dGxlSW5mbxITCgtPcGVyYXRpb25JRBgBIAEoBRI8Cg5C",
            "YXR0bGVVc2VySW5mbxgCIAMoCzIkLlNvdWxLbmlnaHRQcm90b2NvbC5CYXR0",
            "bGVQbGF5ZXJQYWNrEkIKEkFsbFBsYXllck9wZXJhdGlvbhgDIAMoCzImLlNv",
            "dWxLbmlnaHRQcm90b2NvbC5BbGxQbGF5ZXJPcGVyYXRpb24SNAoNU2VsZk9w",
            "ZXJhdGlvbhgEIAEoCzIdLlNvdWxLbmlnaHRQcm90b2NvbC5JbnB1dFBhY2si",
            "dAoQQmF0dGxlUGxheWVyUGFjaxIKCgJJZBgBIAEoBRIQCghCYXR0bGVpZBgC",
            "IAEoBRISCgpQbGF5ZXJuYW1lGAMgASgJEgwKBEhlcm8YBCABKAUSDgoGVGVh",
            "bWlkGAUgASgFEhAKCFNvY2tldElQGAYgASgJIs8ECghNYWluUGFjaxI0CgtS",
            "ZXF1ZXN0Q29kZRgBIAEoDjIfLlNvdWxLbmlnaHRQcm90b2NvbC5SZXF1ZXN0",
            "Q29kZRIyCgpBY3Rpb25Db2RlGAIgASgOMh4uU291bEtuaWdodFByb3RvY29s",
            "LkFjdGlvbkNvZGUSMgoKUmV0dXJuQ29kZRgDIAEoDjIeLlNvdWxLbmlnaHRQ",
            "cm90b2NvbC5SZXR1cm5Db2RlEi4KCEhvc3RDb2RlGAQgASgOMhwuU291bEtu",
            "aWdodFByb3RvY29sLkhvc3RDb2RlEjAKCUxvZ2luUGFjaxgFIAEoCzIdLlNv",
            "dWxLbmlnaHRQcm90b2NvbC5Mb2dpblBhY2sSLwoJUm9vbVBhY2tzGAYgAygL",
            "MhwuU291bEtuaWdodFByb3RvY29sLlJvb21QYWNrEjkKDkNoYXJhY3RlclBh",
            "Y2tzGAcgAygLMiEuU291bEtuaWdodFByb3RvY29sLkNoYXJhY3RlclBhY2sS",
            "GgoSSXNCcm9hZGNhc3RNZXNzYWdlGAggASgIEgsKA1N0chgJIAEoCRIyCgpC",
            "YXR0bGVJbmZvGAogASgLMh4uU291bEtuaWdodFByb3RvY29sLkJhdHRsZUlu",
            "Zm8SPgoQQmF0dGxlUGxheWVyUGFjaxgLIAMoCzIkLlNvdWxLbmlnaHRQcm90",
            "b2NvbC5CYXR0bGVQbGF5ZXJQYWNrEjoKDkJhdHRsZUluaXRJbmZvGAwgASgL",
            "MiIuU291bEtuaWdodFByb3RvY29sLkJhdHRsZUluaXRJbmZvKkgKC1JlcXVl",
            "c3RDb2RlEg8KC1JlcXVlc3ROb25lEAASCAoEVXNlchABEggKBFJvb20QAhII",
            "CgRHYW1lEAMSCgoGQmF0dGxlEAQq+AIKCkFjdGlvbkNvZGUSDgoKQWN0aW9u",
            "Tm9uZRAAEgwKCFJlZ2lzdGVyEAESCQoFTG9naW4QAhIOCgpDcmVhdGVSb29t",
            "EAMSDAoISm9pblJvb20QBBIMCghGaW5kUm9vbRAFEg4KCkZpbmRQbGF5ZXIQ",
            "BhIMCghFeGl0Um9vbRAHEhgKFEVudGVyT25saW5lU3RhcnRSb29tEAgSFQoR",
            "VXBkYXRlUGxheWVyU3RhdGUQCRIUChBTdGFydEVudGVyQmF0dGxlEGQSDwoL",
            "QmF0dGxlUmVhZHkQZRIPCgtCYXR0bGVTdGFydBBmEiIKHkJhdHRsZVB1c2hE",
            "b3dtUGxheWVyT3BlYXJ0aW9ucxBnEiQKIEJhdHRsZVB1c2hEb3dtQWxsRnJh",
            "bWVPcGVhcnRpb25zEGgSFgoSQ2xpZW50U2VuZEdhbWVPdmVyEGkSGgoWQmF0",
            "dGxlUHVzaERvd21HYW1lT3ZlchBqEhAKDEJhdHRsZVJldmlldxBrKj8KClJl",
            "dHVybkNvZGUSDgoKUmV0dXJuTm9uZRAAEgsKB1N1Y2Nlc3MQARIICgRGYWls",
            "EAISCgoGTm9Sb29tEAMqMgoIUm9vbUNvZGUSDwoLV2FpdEZvckpvaW4QABIL",
            "CgdQbGF5aW5nEAESCAoERnVsbBACKkQKCEhvc3RDb2RlEhMKD1NlbGVjdENo",
            "YXJhY3RlchAAEhQKEFdhaXRGb3JTdGFydEdhbWUQARINCglHYW1lU3RhcnQQ",
            "AmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SoulKnightProtocol.RequestCode), typeof(global::SoulKnightProtocol.ActionCode), typeof(global::SoulKnightProtocol.ReturnCode), typeof(global::SoulKnightProtocol.RoomCode), typeof(global::SoulKnightProtocol.HostCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.LoginPack), global::SoulKnightProtocol.LoginPack.Parser, new[]{ "UserName", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.RoomPack), global::SoulKnightProtocol.RoomPack.Parser, new[]{ "RoomName", "CurrentNum", "MaxNum", "RoomCode", "PlayerPacks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.PlayerPack), global::SoulKnightProtocol.PlayerPack.Parser, new[]{ "PlayerName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.CharacterPack), global::SoulKnightProtocol.CharacterPack.Parser, new[]{ "CharacterName", "PlayerType", "InputPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.InputPack), global::SoulKnightProtocol.InputPack.Parser, new[]{ "Horizontal", "Vertical", "MousePosX", "MousePosY", "CharacterPosX", "CharacterPosY", "IsAttackKeyDown", "BattleId", "IsSkillKeyDown", "IsSwitchKeyDown", "IsInteractKeyDown", "FrameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.AllPlayerOperation), global::SoulKnightProtocol.AllPlayerOperation.Parser, new[]{ "Frameid", "Operations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.BattleInitInfo), global::SoulKnightProtocol.BattleInitInfo.Parser, new[]{ "RandSeed", "BattleUserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.BattleInfo), global::SoulKnightProtocol.BattleInfo.Parser, new[]{ "OperationID", "BattleUserInfo", "AllPlayerOperation", "SelfOperation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.BattlePlayerPack), global::SoulKnightProtocol.BattlePlayerPack.Parser, new[]{ "Id", "Battleid", "Playername", "Hero", "Teamid", "SocketIP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SoulKnightProtocol.MainPack), global::SoulKnightProtocol.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "HostCode", "LoginPack", "RoomPacks", "CharacterPacks", "IsBroadcastMessage", "Str", "BattleInfo", "BattlePlayerPack", "BattleInitInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 枚举定义
  /// </summary>
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    [pbr::OriginalName("User")] User = 1,
    [pbr::OriginalName("Room")] Room = 2,
    [pbr::OriginalName("Game")] Game = 3,
    /// <summary>
    /// 添加战斗请求码
    /// </summary>
    [pbr::OriginalName("Battle")] Battle = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    [pbr::OriginalName("Register")] Register = 1,
    [pbr::OriginalName("Login")] Login = 2,
    [pbr::OriginalName("CreateRoom")] CreateRoom = 3,
    [pbr::OriginalName("JoinRoom")] JoinRoom = 4,
    [pbr::OriginalName("FindRoom")] FindRoom = 5,
    [pbr::OriginalName("FindPlayer")] FindPlayer = 6,
    [pbr::OriginalName("ExitRoom")] ExitRoom = 7,
    [pbr::OriginalName("EnterOnlineStartRoom")] EnterOnlineStartRoom = 8,
    [pbr::OriginalName("UpdatePlayerState")] UpdatePlayerState = 9,
    /// <summary>
    /// 战斗相关的动作码
    /// </summary>
    [pbr::OriginalName("StartEnterBattle")] StartEnterBattle = 100,
    /// <summary>
    /// 战斗准备就绪
    /// </summary>
    [pbr::OriginalName("BattleReady")] BattleReady = 101,
    /// <summary>
    /// 战斗开始
    /// </summary>
    [pbr::OriginalName("BattleStart")] BattleStart = 102,
    /// <summary>
    /// 推送玩家操作
    /// </summary>
    [pbr::OriginalName("BattlePushDowmPlayerOpeartions")] BattlePushDowmPlayerOpeartions = 103,
    /// <summary>
    /// 推送所有帧操作
    /// </summary>
    [pbr::OriginalName("BattlePushDowmAllFrameOpeartions")] BattlePushDowmAllFrameOpeartions = 104,
    /// <summary>
    /// 客户端发送游戏结束
    /// </summary>
    [pbr::OriginalName("ClientSendGameOver")] ClientSendGameOver = 105,
    /// <summary>
    /// 服务器推送游戏结束
    /// </summary>
    [pbr::OriginalName("BattlePushDowmGameOver")] BattlePushDowmGameOver = 106,
    /// <summary>
    /// 战斗回放
    /// </summary>
    [pbr::OriginalName("BattleReview")] BattleReview = 107,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    [pbr::OriginalName("Success")] Success = 1,
    [pbr::OriginalName("Fail")] Fail = 2,
    [pbr::OriginalName("NoRoom")] NoRoom = 3,
  }

  public enum RoomCode {
    [pbr::OriginalName("WaitForJoin")] WaitForJoin = 0,
    [pbr::OriginalName("Playing")] Playing = 1,
    [pbr::OriginalName("Full")] Full = 2,
  }

  public enum HostCode {
    [pbr::OriginalName("SelectCharacter")] SelectCharacter = 0,
    [pbr::OriginalName("WaitForStartGame")] WaitForStartGame = 1,
    [pbr::OriginalName("GameStart")] GameStart = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 消息定义
  /// </summary>
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPack : pb::IMessage<RoomPack> {
    private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack(RoomPack other) : this() {
      roomName_ = other.roomName_;
      currentNum_ = other.currentNum_;
      maxNum_ = other.maxNum_;
      roomCode_ = other.roomCode_;
      playerPacks_ = other.playerPacks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack Clone() {
      return new RoomPack(this);
    }

    /// <summary>Field number for the "RoomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentNum" field.</summary>
    public const int CurrentNumFieldNumber = 2;
    private int currentNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentNum {
      get { return currentNum_; }
      set {
        currentNum_ = value;
      }
    }

    /// <summary>Field number for the "MaxNum" field.</summary>
    public const int MaxNumFieldNumber = 3;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "RoomCode" field.</summary>
    public const int RoomCodeFieldNumber = 4;
    private global::SoulKnightProtocol.RoomCode roomCode_ = global::SoulKnightProtocol.RoomCode.WaitForJoin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.RoomCode RoomCode {
      get { return roomCode_; }
      set {
        roomCode_ = value;
      }
    }

    /// <summary>Field number for the "PlayerPacks" field.</summary>
    public const int PlayerPacksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.PlayerPack> _repeated_playerPacks_codec
        = pb::FieldCodec.ForMessage(42, global::SoulKnightProtocol.PlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack> playerPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.PlayerPack> PlayerPacks {
      get { return playerPacks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (CurrentNum != other.CurrentNum) return false;
      if (MaxNum != other.MaxNum) return false;
      if (RoomCode != other.RoomCode) return false;
      if(!playerPacks_.Equals(other.playerPacks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (CurrentNum != 0) hash ^= CurrentNum.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) hash ^= RoomCode.GetHashCode();
      hash ^= playerPacks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (CurrentNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxNum);
      }
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RoomCode);
      }
      playerPacks_.WriteTo(output, _repeated_playerPacks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (CurrentNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentNum);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoomCode);
      }
      size += playerPacks_.CalculateSize(_repeated_playerPacks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPack other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.CurrentNum != 0) {
        CurrentNum = other.CurrentNum;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.RoomCode != global::SoulKnightProtocol.RoomCode.WaitForJoin) {
        RoomCode = other.RoomCode;
      }
      playerPacks_.Add(other.playerPacks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            CurrentNum = input.ReadInt32();
            break;
          }
          case 24: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 32: {
            RoomCode = (global::SoulKnightProtocol.RoomCode) input.ReadEnum();
            break;
          }
          case 42: {
            playerPacks_.AddEntriesFrom(input, _repeated_playerPacks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPack : pb::IMessage<PlayerPack> {
    private static readonly pb::MessageParser<PlayerPack> _parser = new pb::MessageParser<PlayerPack>(() => new PlayerPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack(PlayerPack other) : this() {
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack Clone() {
      return new PlayerPack(this);
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPack other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterPack : pb::IMessage<CharacterPack> {
    private static readonly pb::MessageParser<CharacterPack> _parser = new pb::MessageParser<CharacterPack>(() => new CharacterPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack(CharacterPack other) : this() {
      characterName_ = other.characterName_;
      playerType_ = other.playerType_;
      inputPack_ = other.inputPack_ != null ? other.inputPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterPack Clone() {
      return new CharacterPack(this);
    }

    /// <summary>Field number for the "CharacterName" field.</summary>
    public const int CharacterNameFieldNumber = 1;
    private string characterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterName {
      get { return characterName_; }
      set {
        characterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerType" field.</summary>
    public const int PlayerTypeFieldNumber = 2;
    private string playerType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerType {
      get { return playerType_; }
      set {
        playerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InputPack" field.</summary>
    public const int InputPackFieldNumber = 3;
    private global::SoulKnightProtocol.InputPack inputPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.InputPack InputPack {
      get { return inputPack_; }
      set {
        inputPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterName != other.CharacterName) return false;
      if (PlayerType != other.PlayerType) return false;
      if (!object.Equals(InputPack, other.InputPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterName.Length != 0) hash ^= CharacterName.GetHashCode();
      if (PlayerType.Length != 0) hash ^= PlayerType.GetHashCode();
      if (inputPack_ != null) hash ^= InputPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharacterName);
      }
      if (PlayerType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerType);
      }
      if (inputPack_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InputPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterName);
      }
      if (PlayerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerType);
      }
      if (inputPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterPack other) {
      if (other == null) {
        return;
      }
      if (other.CharacterName.Length != 0) {
        CharacterName = other.CharacterName;
      }
      if (other.PlayerType.Length != 0) {
        PlayerType = other.PlayerType;
      }
      if (other.inputPack_ != null) {
        if (inputPack_ == null) {
          InputPack = new global::SoulKnightProtocol.InputPack();
        }
        InputPack.MergeFrom(other.InputPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CharacterName = input.ReadString();
            break;
          }
          case 18: {
            PlayerType = input.ReadString();
            break;
          }
          case 26: {
            if (inputPack_ == null) {
              InputPack = new global::SoulKnightProtocol.InputPack();
            }
            input.ReadMessage(InputPack);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputPack : pb::IMessage<InputPack> {
    private static readonly pb::MessageParser<InputPack> _parser = new pb::MessageParser<InputPack>(() => new InputPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack(InputPack other) : this() {
      horizontal_ = other.horizontal_;
      vertical_ = other.vertical_;
      mousePosX_ = other.mousePosX_;
      mousePosY_ = other.mousePosY_;
      characterPosX_ = other.characterPosX_;
      characterPosY_ = other.characterPosY_;
      isAttackKeyDown_ = other.isAttackKeyDown_;
      battleId_ = other.battleId_;
      isSkillKeyDown_ = other.isSkillKeyDown_;
      isSwitchKeyDown_ = other.isSwitchKeyDown_;
      isInteractKeyDown_ = other.isInteractKeyDown_;
      frameId_ = other.frameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputPack Clone() {
      return new InputPack(this);
    }

    /// <summary>Field number for the "Horizontal" field.</summary>
    public const int HorizontalFieldNumber = 1;
    private float horizontal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Horizontal {
      get { return horizontal_; }
      set {
        horizontal_ = value;
      }
    }

    /// <summary>Field number for the "Vertical" field.</summary>
    public const int VerticalFieldNumber = 2;
    private float vertical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vertical {
      get { return vertical_; }
      set {
        vertical_ = value;
      }
    }

    /// <summary>Field number for the "MousePosX" field.</summary>
    public const int MousePosXFieldNumber = 3;
    private float mousePosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MousePosX {
      get { return mousePosX_; }
      set {
        mousePosX_ = value;
      }
    }

    /// <summary>Field number for the "MousePosY" field.</summary>
    public const int MousePosYFieldNumber = 4;
    private float mousePosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MousePosY {
      get { return mousePosY_; }
      set {
        mousePosY_ = value;
      }
    }

    /// <summary>Field number for the "CharacterPosX" field.</summary>
    public const int CharacterPosXFieldNumber = 5;
    private float characterPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CharacterPosX {
      get { return characterPosX_; }
      set {
        characterPosX_ = value;
      }
    }

    /// <summary>Field number for the "CharacterPosY" field.</summary>
    public const int CharacterPosYFieldNumber = 6;
    private float characterPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CharacterPosY {
      get { return characterPosY_; }
      set {
        characterPosY_ = value;
      }
    }

    /// <summary>Field number for the "IsAttackKeyDown" field.</summary>
    public const int IsAttackKeyDownFieldNumber = 7;
    private bool isAttackKeyDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttackKeyDown {
      get { return isAttackKeyDown_; }
      set {
        isAttackKeyDown_ = value;
      }
    }

    /// <summary>Field number for the "BattleId" field.</summary>
    public const int BattleIdFieldNumber = 8;
    private int battleId_;
    /// <summary>
    /// 战斗系统扩展字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "IsSkillKeyDown" field.</summary>
    public const int IsSkillKeyDownFieldNumber = 9;
    private bool isSkillKeyDown_;
    /// <summary>
    /// 是否使用技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkillKeyDown {
      get { return isSkillKeyDown_; }
      set {
        isSkillKeyDown_ = value;
      }
    }

    /// <summary>Field number for the "IsSwitchKeyDown" field.</summary>
    public const int IsSwitchKeyDownFieldNumber = 10;
    private bool isSwitchKeyDown_;
    /// <summary>
    /// 是否切换武器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSwitchKeyDown {
      get { return isSwitchKeyDown_; }
      set {
        isSwitchKeyDown_ = value;
      }
    }

    /// <summary>Field number for the "IsInteractKeyDown" field.</summary>
    public const int IsInteractKeyDownFieldNumber = 11;
    private bool isInteractKeyDown_;
    /// <summary>
    /// 是否交互
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInteractKeyDown {
      get { return isInteractKeyDown_; }
      set {
        isInteractKeyDown_ = value;
      }
    }

    /// <summary>Field number for the "FrameId" field.</summary>
    public const int FrameIdFieldNumber = 12;
    private int frameId_;
    /// <summary>
    /// 帧ID，用于帧同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Horizontal, other.Horizontal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vertical, other.Vertical)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MousePosX, other.MousePosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MousePosY, other.MousePosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CharacterPosX, other.CharacterPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CharacterPosY, other.CharacterPosY)) return false;
      if (IsAttackKeyDown != other.IsAttackKeyDown) return false;
      if (BattleId != other.BattleId) return false;
      if (IsSkillKeyDown != other.IsSkillKeyDown) return false;
      if (IsSwitchKeyDown != other.IsSwitchKeyDown) return false;
      if (IsInteractKeyDown != other.IsInteractKeyDown) return false;
      if (FrameId != other.FrameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Horizontal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Horizontal);
      if (Vertical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vertical);
      if (MousePosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MousePosX);
      if (MousePosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MousePosY);
      if (CharacterPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CharacterPosX);
      if (CharacterPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CharacterPosY);
      if (IsAttackKeyDown != false) hash ^= IsAttackKeyDown.GetHashCode();
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (IsSkillKeyDown != false) hash ^= IsSkillKeyDown.GetHashCode();
      if (IsSwitchKeyDown != false) hash ^= IsSwitchKeyDown.GetHashCode();
      if (IsInteractKeyDown != false) hash ^= IsInteractKeyDown.GetHashCode();
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Horizontal != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Horizontal);
      }
      if (Vertical != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Vertical);
      }
      if (MousePosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MousePosX);
      }
      if (MousePosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MousePosY);
      }
      if (CharacterPosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CharacterPosX);
      }
      if (CharacterPosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CharacterPosY);
      }
      if (IsAttackKeyDown != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsAttackKeyDown);
      }
      if (BattleId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BattleId);
      }
      if (IsSkillKeyDown != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsSkillKeyDown);
      }
      if (IsSwitchKeyDown != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsSwitchKeyDown);
      }
      if (IsInteractKeyDown != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsInteractKeyDown);
      }
      if (FrameId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FrameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Horizontal != 0F) {
        size += 1 + 4;
      }
      if (Vertical != 0F) {
        size += 1 + 4;
      }
      if (MousePosX != 0F) {
        size += 1 + 4;
      }
      if (MousePosY != 0F) {
        size += 1 + 4;
      }
      if (CharacterPosX != 0F) {
        size += 1 + 4;
      }
      if (CharacterPosY != 0F) {
        size += 1 + 4;
      }
      if (IsAttackKeyDown != false) {
        size += 1 + 1;
      }
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
      }
      if (IsSkillKeyDown != false) {
        size += 1 + 1;
      }
      if (IsSwitchKeyDown != false) {
        size += 1 + 1;
      }
      if (IsInteractKeyDown != false) {
        size += 1 + 1;
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputPack other) {
      if (other == null) {
        return;
      }
      if (other.Horizontal != 0F) {
        Horizontal = other.Horizontal;
      }
      if (other.Vertical != 0F) {
        Vertical = other.Vertical;
      }
      if (other.MousePosX != 0F) {
        MousePosX = other.MousePosX;
      }
      if (other.MousePosY != 0F) {
        MousePosY = other.MousePosY;
      }
      if (other.CharacterPosX != 0F) {
        CharacterPosX = other.CharacterPosX;
      }
      if (other.CharacterPosY != 0F) {
        CharacterPosY = other.CharacterPosY;
      }
      if (other.IsAttackKeyDown != false) {
        IsAttackKeyDown = other.IsAttackKeyDown;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.IsSkillKeyDown != false) {
        IsSkillKeyDown = other.IsSkillKeyDown;
      }
      if (other.IsSwitchKeyDown != false) {
        IsSwitchKeyDown = other.IsSwitchKeyDown;
      }
      if (other.IsInteractKeyDown != false) {
        IsInteractKeyDown = other.IsInteractKeyDown;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Horizontal = input.ReadFloat();
            break;
          }
          case 21: {
            Vertical = input.ReadFloat();
            break;
          }
          case 29: {
            MousePosX = input.ReadFloat();
            break;
          }
          case 37: {
            MousePosY = input.ReadFloat();
            break;
          }
          case 45: {
            CharacterPosX = input.ReadFloat();
            break;
          }
          case 53: {
            CharacterPosY = input.ReadFloat();
            break;
          }
          case 56: {
            IsAttackKeyDown = input.ReadBool();
            break;
          }
          case 64: {
            BattleId = input.ReadInt32();
            break;
          }
          case 72: {
            IsSkillKeyDown = input.ReadBool();
            break;
          }
          case 80: {
            IsSwitchKeyDown = input.ReadBool();
            break;
          }
          case 88: {
            IsInteractKeyDown = input.ReadBool();
            break;
          }
          case 96: {
            FrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllPlayerOperation : pb::IMessage<AllPlayerOperation> {
    private static readonly pb::MessageParser<AllPlayerOperation> _parser = new pb::MessageParser<AllPlayerOperation>(() => new AllPlayerOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllPlayerOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation(AllPlayerOperation other) : this() {
      frameid_ = other.frameid_;
      operations_ = other.operations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation Clone() {
      return new AllPlayerOperation(this);
    }

    /// <summary>Field number for the "Frameid" field.</summary>
    public const int FrameidFieldNumber = 1;
    private int frameid_;
    /// <summary>
    /// 帧ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frameid {
      get { return frameid_; }
      set {
        frameid_ = value;
      }
    }

    /// <summary>Field number for the "Operations" field.</summary>
    public const int OperationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.InputPack> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(18, global::SoulKnightProtocol.InputPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.InputPack> operations_ = new pbc::RepeatedField<global::SoulKnightProtocol.InputPack>();
    /// <summary>
    /// 玩家操作列表，使用 InputPack 替代 PlayerOperation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.InputPack> Operations {
      get { return operations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllPlayerOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllPlayerOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frameid != other.Frameid) return false;
      if(!operations_.Equals(other.operations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frameid != 0) hash ^= Frameid.GetHashCode();
      hash ^= operations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frameid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frameid);
      }
      operations_.WriteTo(output, _repeated_operations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frameid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frameid);
      }
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllPlayerOperation other) {
      if (other == null) {
        return;
      }
      if (other.Frameid != 0) {
        Frameid = other.Frameid;
      }
      operations_.Add(other.operations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Frameid = input.ReadInt32();
            break;
          }
          case 18: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 添加战斗初始化信息
  /// </summary>
  public sealed partial class BattleInitInfo : pb::IMessage<BattleInitInfo> {
    private static readonly pb::MessageParser<BattleInitInfo> _parser = new pb::MessageParser<BattleInitInfo>(() => new BattleInitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitInfo(BattleInitInfo other) : this() {
      randSeed_ = other.randSeed_;
      battleUserInfo_ = other.battleUserInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInitInfo Clone() {
      return new BattleInitInfo(this);
    }

    /// <summary>Field number for the "RandSeed" field.</summary>
    public const int RandSeedFieldNumber = 1;
    private int randSeed_;
    /// <summary>
    /// 随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandSeed {
      get { return randSeed_; }
      set {
        randSeed_ = value;
      }
    }

    /// <summary>Field number for the "BattleUserInfo" field.</summary>
    public const int BattleUserInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.BattlePlayerPack> _repeated_battleUserInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SoulKnightProtocol.BattlePlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> battleUserInfo_ = new pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack>();
    /// <summary>
    /// 战斗玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> BattleUserInfo {
      get { return battleUserInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandSeed != other.RandSeed) return false;
      if(!battleUserInfo_.Equals(other.battleUserInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandSeed != 0) hash ^= RandSeed.GetHashCode();
      hash ^= battleUserInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RandSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandSeed);
      }
      battleUserInfo_.WriteTo(output, _repeated_battleUserInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandSeed);
      }
      size += battleUserInfo_.CalculateSize(_repeated_battleUserInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInitInfo other) {
      if (other == null) {
        return;
      }
      if (other.RandSeed != 0) {
        RandSeed = other.RandSeed;
      }
      battleUserInfo_.Add(other.battleUserInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandSeed = input.ReadInt32();
            break;
          }
          case 18: {
            battleUserInfo_.AddEntriesFrom(input, _repeated_battleUserInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleInfo : pb::IMessage<BattleInfo> {
    private static readonly pb::MessageParser<BattleInfo> _parser = new pb::MessageParser<BattleInfo>(() => new BattleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo(BattleInfo other) : this() {
      operationID_ = other.operationID_;
      battleUserInfo_ = other.battleUserInfo_.Clone();
      allPlayerOperation_ = other.allPlayerOperation_.Clone();
      selfOperation_ = other.selfOperation_ != null ? other.selfOperation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleInfo Clone() {
      return new BattleInfo(this);
    }

    /// <summary>Field number for the "OperationID" field.</summary>
    public const int OperationIDFieldNumber = 1;
    private int operationID_;
    /// <summary>
    /// 操作ID/帧ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationID {
      get { return operationID_; }
      set {
        operationID_ = value;
      }
    }

    /// <summary>Field number for the "BattleUserInfo" field.</summary>
    public const int BattleUserInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.BattlePlayerPack> _repeated_battleUserInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SoulKnightProtocol.BattlePlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> battleUserInfo_ = new pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack>();
    /// <summary>
    /// 战斗玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> BattleUserInfo {
      get { return battleUserInfo_; }
    }

    /// <summary>Field number for the "AllPlayerOperation" field.</summary>
    public const int AllPlayerOperationFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.AllPlayerOperation> _repeated_allPlayerOperation_codec
        = pb::FieldCodec.ForMessage(26, global::SoulKnightProtocol.AllPlayerOperation.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.AllPlayerOperation> allPlayerOperation_ = new pbc::RepeatedField<global::SoulKnightProtocol.AllPlayerOperation>();
    /// <summary>
    /// 所有玩家操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.AllPlayerOperation> AllPlayerOperation {
      get { return allPlayerOperation_; }
    }

    /// <summary>Field number for the "SelfOperation" field.</summary>
    public const int SelfOperationFieldNumber = 4;
    private global::SoulKnightProtocol.InputPack selfOperation_;
    /// <summary>
    /// 自己的操作，使用 InputPack 替代 PlayerOperation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.InputPack SelfOperation {
      get { return selfOperation_; }
      set {
        selfOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperationID != other.OperationID) return false;
      if(!battleUserInfo_.Equals(other.battleUserInfo_)) return false;
      if(!allPlayerOperation_.Equals(other.allPlayerOperation_)) return false;
      if (!object.Equals(SelfOperation, other.SelfOperation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OperationID != 0) hash ^= OperationID.GetHashCode();
      hash ^= battleUserInfo_.GetHashCode();
      hash ^= allPlayerOperation_.GetHashCode();
      if (selfOperation_ != null) hash ^= SelfOperation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OperationID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OperationID);
      }
      battleUserInfo_.WriteTo(output, _repeated_battleUserInfo_codec);
      allPlayerOperation_.WriteTo(output, _repeated_allPlayerOperation_codec);
      if (selfOperation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfOperation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OperationID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationID);
      }
      size += battleUserInfo_.CalculateSize(_repeated_battleUserInfo_codec);
      size += allPlayerOperation_.CalculateSize(_repeated_allPlayerOperation_codec);
      if (selfOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfOperation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.OperationID != 0) {
        OperationID = other.OperationID;
      }
      battleUserInfo_.Add(other.battleUserInfo_);
      allPlayerOperation_.Add(other.allPlayerOperation_);
      if (other.selfOperation_ != null) {
        if (selfOperation_ == null) {
          SelfOperation = new global::SoulKnightProtocol.InputPack();
        }
        SelfOperation.MergeFrom(other.SelfOperation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OperationID = input.ReadInt32();
            break;
          }
          case 18: {
            battleUserInfo_.AddEntriesFrom(input, _repeated_battleUserInfo_codec);
            break;
          }
          case 26: {
            allPlayerOperation_.AddEntriesFrom(input, _repeated_allPlayerOperation_codec);
            break;
          }
          case 34: {
            if (selfOperation_ == null) {
              SelfOperation = new global::SoulKnightProtocol.InputPack();
            }
            input.ReadMessage(SelfOperation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修改 BattlePlayerPack，确保包含所有必要字段
  /// </summary>
  public sealed partial class BattlePlayerPack : pb::IMessage<BattlePlayerPack> {
    private static readonly pb::MessageParser<BattlePlayerPack> _parser = new pb::MessageParser<BattlePlayerPack>(() => new BattlePlayerPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattlePlayerPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerPack(BattlePlayerPack other) : this() {
      id_ = other.id_;
      battleid_ = other.battleid_;
      playername_ = other.playername_;
      hero_ = other.hero_;
      teamid_ = other.teamid_;
      socketIP_ = other.socketIP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattlePlayerPack Clone() {
      return new BattlePlayerPack(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Battleid" field.</summary>
    public const int BattleidFieldNumber = 2;
    private int battleid_;
    /// <summary>
    /// 战斗内ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battleid {
      get { return battleid_; }
      set {
        battleid_ = value;
      }
    }

    /// <summary>Field number for the "Playername" field.</summary>
    public const int PlayernameFieldNumber = 3;
    private string playername_ = "";
    /// <summary>
    /// 玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Playername {
      get { return playername_; }
      set {
        playername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 4;
    private int hero_;
    /// <summary>
    /// 英雄类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    /// <summary>Field number for the "Teamid" field.</summary>
    public const int TeamidFieldNumber = 5;
    private int teamid_;
    /// <summary>
    /// 队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Teamid {
      get { return teamid_; }
      set {
        teamid_ = value;
      }
    }

    /// <summary>Field number for the "SocketIP" field.</summary>
    public const int SocketIPFieldNumber = 6;
    private string socketIP_ = "";
    /// <summary>
    /// 玩家Socket IP地址，用于UDP通信
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SocketIP {
      get { return socketIP_; }
      set {
        socketIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattlePlayerPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattlePlayerPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Battleid != other.Battleid) return false;
      if (Playername != other.Playername) return false;
      if (Hero != other.Hero) return false;
      if (Teamid != other.Teamid) return false;
      if (SocketIP != other.SocketIP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Battleid != 0) hash ^= Battleid.GetHashCode();
      if (Playername.Length != 0) hash ^= Playername.GetHashCode();
      if (Hero != 0) hash ^= Hero.GetHashCode();
      if (Teamid != 0) hash ^= Teamid.GetHashCode();
      if (SocketIP.Length != 0) hash ^= SocketIP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Battleid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Battleid);
      }
      if (Playername.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Playername);
      }
      if (Hero != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hero);
      }
      if (Teamid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Teamid);
      }
      if (SocketIP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SocketIP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Battleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battleid);
      }
      if (Playername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Playername);
      }
      if (Hero != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hero);
      }
      if (Teamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Teamid);
      }
      if (SocketIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SocketIP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattlePlayerPack other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Battleid != 0) {
        Battleid = other.Battleid;
      }
      if (other.Playername.Length != 0) {
        Playername = other.Playername;
      }
      if (other.Hero != 0) {
        Hero = other.Hero;
      }
      if (other.Teamid != 0) {
        Teamid = other.Teamid;
      }
      if (other.SocketIP.Length != 0) {
        SocketIP = other.SocketIP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Battleid = input.ReadInt32();
            break;
          }
          case 26: {
            Playername = input.ReadString();
            break;
          }
          case 32: {
            Hero = input.ReadInt32();
            break;
          }
          case 40: {
            Teamid = input.ReadInt32();
            break;
          }
          case 50: {
            SocketIP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SoulKnightProtocol.SoulKnightReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      hostCode_ = other.hostCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      roomPacks_ = other.roomPacks_.Clone();
      characterPacks_ = other.characterPacks_.Clone();
      isBroadcastMessage_ = other.isBroadcastMessage_;
      str_ = other.str_;
      battleInfo_ = other.battleInfo_ != null ? other.battleInfo_.Clone() : null;
      battlePlayerPack_ = other.battlePlayerPack_.Clone();
      battleInitInfo_ = other.battleInitInfo_ != null ? other.battleInitInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "RequestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SoulKnightProtocol.RequestCode requestCode_ = global::SoulKnightProtocol.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "ActionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SoulKnightProtocol.ActionCode actionCode_ = global::SoulKnightProtocol.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "ReturnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SoulKnightProtocol.ReturnCode returnCode_ = global::SoulKnightProtocol.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "HostCode" field.</summary>
    public const int HostCodeFieldNumber = 4;
    private global::SoulKnightProtocol.HostCode hostCode_ = global::SoulKnightProtocol.HostCode.SelectCharacter;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.HostCode HostCode {
      get { return hostCode_; }
      set {
        hostCode_ = value;
      }
    }

    /// <summary>Field number for the "LoginPack" field.</summary>
    public const int LoginPackFieldNumber = 5;
    private global::SoulKnightProtocol.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "RoomPacks" field.</summary>
    public const int RoomPacksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.RoomPack> _repeated_roomPacks_codec
        = pb::FieldCodec.ForMessage(50, global::SoulKnightProtocol.RoomPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.RoomPack> roomPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.RoomPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.RoomPack> RoomPacks {
      get { return roomPacks_; }
    }

    /// <summary>Field number for the "CharacterPacks" field.</summary>
    public const int CharacterPacksFieldNumber = 7;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.CharacterPack> _repeated_characterPacks_codec
        = pb::FieldCodec.ForMessage(58, global::SoulKnightProtocol.CharacterPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack> characterPacks_ = new pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.CharacterPack> CharacterPacks {
      get { return characterPacks_; }
    }

    /// <summary>Field number for the "IsBroadcastMessage" field.</summary>
    public const int IsBroadcastMessageFieldNumber = 8;
    private bool isBroadcastMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBroadcastMessage {
      get { return isBroadcastMessage_; }
      set {
        isBroadcastMessage_ = value;
      }
    }

    /// <summary>Field number for the "Str" field.</summary>
    public const int StrFieldNumber = 9;
    private string str_ = "";
    /// <summary>
    /// 战斗相关字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BattleInfo" field.</summary>
    public const int BattleInfoFieldNumber = 10;
    private global::SoulKnightProtocol.BattleInfo battleInfo_;
    /// <summary>
    /// 战斗信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.BattleInfo BattleInfo {
      get { return battleInfo_; }
      set {
        battleInfo_ = value;
      }
    }

    /// <summary>Field number for the "BattlePlayerPack" field.</summary>
    public const int BattlePlayerPackFieldNumber = 11;
    private static readonly pb::FieldCodec<global::SoulKnightProtocol.BattlePlayerPack> _repeated_battlePlayerPack_codec
        = pb::FieldCodec.ForMessage(90, global::SoulKnightProtocol.BattlePlayerPack.Parser);
    private readonly pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> battlePlayerPack_ = new pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack>();
    /// <summary>
    /// 战斗玩家包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SoulKnightProtocol.BattlePlayerPack> BattlePlayerPack {
      get { return battlePlayerPack_; }
    }

    /// <summary>Field number for the "BattleInitInfo" field.</summary>
    public const int BattleInitInfoFieldNumber = 12;
    private global::SoulKnightProtocol.BattleInitInfo battleInitInfo_;
    /// <summary>
    /// 战斗初始化信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SoulKnightProtocol.BattleInitInfo BattleInitInfo {
      get { return battleInitInfo_; }
      set {
        battleInitInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (HostCode != other.HostCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if(!roomPacks_.Equals(other.roomPacks_)) return false;
      if(!characterPacks_.Equals(other.characterPacks_)) return false;
      if (IsBroadcastMessage != other.IsBroadcastMessage) return false;
      if (Str != other.Str) return false;
      if (!object.Equals(BattleInfo, other.BattleInfo)) return false;
      if(!battlePlayerPack_.Equals(other.battlePlayerPack_)) return false;
      if (!object.Equals(BattleInitInfo, other.BattleInitInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) hash ^= HostCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      hash ^= roomPacks_.GetHashCode();
      hash ^= characterPacks_.GetHashCode();
      if (IsBroadcastMessage != false) hash ^= IsBroadcastMessage.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (battleInfo_ != null) hash ^= BattleInfo.GetHashCode();
      hash ^= battlePlayerPack_.GetHashCode();
      if (battleInitInfo_ != null) hash ^= BattleInitInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        output.WriteRawTag(32);
        output.WriteEnum((int) HostCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LoginPack);
      }
      roomPacks_.WriteTo(output, _repeated_roomPacks_codec);
      characterPacks_.WriteTo(output, _repeated_characterPacks_codec);
      if (IsBroadcastMessage != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBroadcastMessage);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Str);
      }
      if (battleInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(BattleInfo);
      }
      battlePlayerPack_.WriteTo(output, _repeated_battlePlayerPack_codec);
      if (battleInitInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BattleInitInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HostCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      size += roomPacks_.CalculateSize(_repeated_roomPacks_codec);
      size += characterPacks_.CalculateSize(_repeated_characterPacks_codec);
      if (IsBroadcastMessage != false) {
        size += 1 + 1;
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (battleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleInfo);
      }
      size += battlePlayerPack_.CalculateSize(_repeated_battlePlayerPack_codec);
      if (battleInitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleInitInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SoulKnightProtocol.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SoulKnightProtocol.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SoulKnightProtocol.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.HostCode != global::SoulKnightProtocol.HostCode.SelectCharacter) {
        HostCode = other.HostCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SoulKnightProtocol.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      roomPacks_.Add(other.roomPacks_);
      characterPacks_.Add(other.characterPacks_);
      if (other.IsBroadcastMessage != false) {
        IsBroadcastMessage = other.IsBroadcastMessage;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.battleInfo_ != null) {
        if (battleInfo_ == null) {
          BattleInfo = new global::SoulKnightProtocol.BattleInfo();
        }
        BattleInfo.MergeFrom(other.BattleInfo);
      }
      battlePlayerPack_.Add(other.battlePlayerPack_);
      if (other.battleInitInfo_ != null) {
        if (battleInitInfo_ == null) {
          BattleInitInfo = new global::SoulKnightProtocol.BattleInitInfo();
        }
        BattleInitInfo.MergeFrom(other.BattleInitInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SoulKnightProtocol.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SoulKnightProtocol.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SoulKnightProtocol.ReturnCode) input.ReadEnum();
            break;
          }
          case 32: {
            HostCode = (global::SoulKnightProtocol.HostCode) input.ReadEnum();
            break;
          }
          case 42: {
            if (loginPack_ == null) {
              LoginPack = new global::SoulKnightProtocol.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 50: {
            roomPacks_.AddEntriesFrom(input, _repeated_roomPacks_codec);
            break;
          }
          case 58: {
            characterPacks_.AddEntriesFrom(input, _repeated_characterPacks_codec);
            break;
          }
          case 64: {
            IsBroadcastMessage = input.ReadBool();
            break;
          }
          case 74: {
            Str = input.ReadString();
            break;
          }
          case 82: {
            if (battleInfo_ == null) {
              BattleInfo = new global::SoulKnightProtocol.BattleInfo();
            }
            input.ReadMessage(BattleInfo);
            break;
          }
          case 90: {
            battlePlayerPack_.AddEntriesFrom(input, _repeated_battlePlayerPack_codec);
            break;
          }
          case 98: {
            if (battleInitInfo_ == null) {
              BattleInitInfo = new global::SoulKnightProtocol.BattleInitInfo();
            }
            input.ReadMessage(BattleInitInfo);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
